[database]
uri=postgres://user:pass@postgres:5432/app
# these configurations are only used when streaming wal, the example below are the default values, uncomment only if you need to change them
# replication_slot=pg_event_proxy 
# wal2json_params=\"format-version\" '2' , \"include-types\" '0'

# configuration for rabbitmq upstream
[upstream.myamqp]
kind=amqp
uri=amqp://user:pass@rabbitmq//
# format of "bridge_channels" config is as follows
# pgchannel1->exchange:topic_exchange_name, pgchannel2->queue:queue_name, pgchannel3->topic:topic_name
# "wal2json" has a special meaning when used as a value for pgchannel
# in this case the replication events (wal) will be streamed (as opposed to events from notify wal2json, ... query)
# for example "wal2json->exchange:amqp.topic" will stream wal to "amqp.topic" exchange
# when streaming wal, the database user needs to have replication privilege (see db/src/authorization/roles.sql)
bridge_channels=amqpchannel->exchange:amq.topic

# configuration for redis upstream
[upstream.myredis]
kind=redis
uri=redis://default:pass@redis
bridge_channels=redischannel->topic:events

# configuration for mqtt upstream
[upstream.mymqtt]
kind=mqtt
uri=mqtt://user:pass@mosquitto:1883
bridge_channels=mqttchannel->topic:events


# For all aws upstreams, the authentication is read from the same places as aws-cli

# configuration for sns upstream
[upstream.mysns]
kind=awssns
uri=aws://sqs-mock:9911 # in production replace with aws://us-east-1 (i.e. the region id)
bridge_channels=snschannel->topic:arn:aws:sns:eu-west-2:123450000001:test-topic

# configuration for sqs upstream
[upstream.mysqs]
kind=awssqs
uri=aws://sqs-mock:9911 # in production replace with aws://us-east-1 (i.e. the region id)
bridge_channels=sqschannel->queue:default

# # configuration for lambda upstream
# [upstream.mylambda]
# kind=awslambda
# uri=aws://us-east-1
# bridge_channels=lambdachannel->function:helloworldfunction